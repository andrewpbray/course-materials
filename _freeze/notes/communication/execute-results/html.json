{
  "hash": "32ad6153638a16df38de775bad543bf4",
  "result": {
    "markdown": "---\ntitle: \"Effective Communication\"\ntoc: true\ndate: \"8/24/2022\"\n---\n\n\n[PDF]{.btn .btn-primary} [Perusall]{.btn .btn-primary} [Reading Questions]{.btn .btn-success}\n\nThis lecture is about communication in various contexts in data science. It first provides four general principles of communication, then discusses some strategies that implement these principles, and finally examines how these suggestions apply in a few examples. The primary reference is [Trees, Maps and Theorems](http://www.treesmapsandtheorems.com/) by Jean-luc Doumont and other references are listed at the bottom of the page. \n\n> Effective communication is optimization under constraints. -- *Trees, Maps and Theorems*\n\nWhat makes for effective communication is context dependent; the context determines the constraints. The context often depends upon:\n\n- Audience (business executives, data scientists, etc)\n- Medium (slide show, text document, etc)\n- Purpose (convey results, impress an employer, etc)\n- Content (we built a predictive model, drug A doesn't work, etc)\n- Time (do you have a day or a week to prepare?)\n\n\nCommunicating well is challenging and takes lots of practice. In my experience communication involves design, engineering and empathy as well as the ability to work with words. In data science it requires the ability to work in different mediums, for example:\n\n- Written document\n- Static visualizations\n- Dynamic visualizations\n- Interactive application (e.g. Shiny)\n- Slideshow\n- Web page\n- Speaking\n- Literate programming (e.g. R Markdown)\n\nThe principles discussed in this lecture apply to all of these mediums. These principles also apply to more contexts than just presenting results:\n\n- Coding an algorithm (other people, including a future you, need to be able to understand your code)\n- Coordinating with collaborators\n- Asking for help\n\n\n# **Four general principles for commuication**\n\nThis section presents four general rules for communicating effectively:\n\n1. Adapt to your audience.\n2. Maximize the signal to noise ratio.\n3. Use effective redundancy.\n4. There are usually trade-offs\n\nThe first three of these come from [Trees, Maps and Theorems](http://www.treesmapsandtheorems.com/) (these rules might remind you of [information and coding theory](https://en.wikipedia.org/wiki/Information_theory)). They are general principles which apply to many different contexts. \n\n\n\n## 1. Adapt to your audience\n\nAdapting to the audience means you take responsibility for the success or failure of your message reaching the audience. It comes naturally to us; you talk to your parents differently from how you talk to your best friend. The act of adapting requires empathy; you have to understand how the recipient perceives the information you are conveying. Adapting also requires some persistence; if the first strategy does not succeed then try another one.\n\nAdapting is partially an act of generosity. How many hours of your life have been wasted sitting through a lecture that you didn't get much out of? However, communicating well is also beneficial to your career.\n\n> Much like being customer-minded in business or being user-friendly in software development, adapting to one's audience is really a question of **effectiveness** more than one of selflessness. -- *Trees, Maps and Theorems*\n\nUnderstanding who is in the audience is a critical step. Some common types of audience members you may face include:\n\n- Familiar or unfamiliar with the topic\n- Technical or non-technical\n- Expert in the topic at hand or in a similar but distinct topic\n- Native or non-native language speakers\n- Interested or uninterested in the topic\n\nMany audiences are heterogenous which presents an extra challenge.\n\n\n## 2. Maximize the signal to noise ratio\n\n\n> Nothing is neutral in communication. -- *Trees, Maps and Theorems*\n\nThe audience sees every dot in a graphic and hears every word you speak. Anything that does not convey your message to the audience hampers your message. Often message optimization is more about minimizing noise than maximizing signal. \n\nFor visualization, simple and focused is often better than fancy and detailed. For example watch the progression of a poor graphic to an effective graphic in  [this blog post](http://www.storytellingwithdata.com/blog/2017/3/29/declutter-this-graph).\n\nDocuments/presentations/webpages should be consistent and minimal. All formatting (font, text size, structure, webpage style, graph colors, etc) should remain uniform throughout. Changes in formatting will draw the audience's attention so use it selectively. Similarly, bolding and emphasis words (very, really, etc) should be used only occasionally. \n\n<!-- Consider the following two sentences. -->\n\n<!-- - **Support Vector Machine** is a very powerful and widely used **classification algrithm** used by many people who **machine learning** practitioners.  -->\n<!-- - Support Vector Machine is an effective classification algorithm.  -->\n\n<!-- The first sentence is noisy: overly wordy, too much highlighting, typos and awkward grammar. The second sentence simply conveys the message.  -->\n\nOptimizing a message's delivery first requires a clear understanding of exactly what the message is. Figuring out your thesis is not always easy; it sometimes takes several rounds of revision to home in on and understand your thesis.\n\n\n## 3. Use effective redundancy\n\nIf you convey your message via multiple channels the audience has more than one chance to understand the message. When I lecture in class I communicate orally and visually (with a slideshow). A stop sign conveys its message in three ways: color, text and shape. \n\n<!-- ![http://www.huffingtonpost.com/mitch-ditkoff/the-curious-origins-of-th_b_9720358.html](http://images.huffingtonpost.com/2016-04-18-1460992862-2887201-iStock_000022162723_Small.jpg) -->\n\n![](stop_sign.jpg)\n\n\\n\n\nRedundancy can also mean repetition. It can be worth repeating important points multiple times. For example, my boss this past summer gave me this advice about presentations (originally [from Aristotle](https://businesstown.com/articles/step-by-step-guide-to-making-a-compelling-presentation/)):\n\n> Tell them what you are going to tell them. Tell them. Then tell them what you told them.\n\nIn oral presentations stating the main points both at the beginning and end will help the audience remember them.\n\n## 4. Trade-offs\nYou may have come across the famous quote in an Economics class that means there are usually trade-offs to decisions:\n\n> There ain't no such thing as a free lunch. -- *(popularized by) Milton Friedman*\n\nIn the context of communication the biggest \"cost\" is likely to be time spent preparing; it takes time to communicate well. Tweaking a single graphic can take hours. Your goal is not perfection; your goal is \"good enough\" for the purpose at hand. \n\n\"Good enough\" is once again context dependent. An email to your mom might get a quick glace over while an email to a potential employer likely takes multiple rounds of revision. \n\nOther trade-offs might include:\n\n- Provide more detail vs. make the content easier to understand\n- Targeting one audience vs. another audience\n\n\n# **Communication strategies**\n\nThis section discusses a number of strategies for effective communication. Many of these suggestions are corollaries of the four principles discussed above and are not mutually exclusive.\n\n## Revise, revise, revise\n\nDo many rounds of revision. This applies to coding, writing, oral presentations and making visualizations. Revision is one of the best ways to improve something. Stepping away then coming back will give your a fresh perspective. It will also help you catch errors.\n\nYou should attack any work you are editing (your own or someone elseâ€™s). To quote my father:\n\n> When editing go for the jugular. -- *Calum Carmichael*\n\nIf you are publishing something publicly you should revise it several times. If it's something that really matters then you should get outside feedback from several people.\n\n\n\n<!-- Revision is also about iteration. Complex engeering problems are typically solved iteratively. For example, one of the principles of Agile software development is: -->\n\n<!-- > Make it work. Make it right. Make it fast. -->\n\n<!-- Revision has to be balanced with time constraints. Anything you publish publically should under go at least several rounds of revisions. -->\n\n\n## State the message first then state the details\n\nAn effective presentation/document states the message *before* the details of the argument. The message is (usually) more important than the details. Therefore the structure of the document should reflect this inequality. The audience may not appreciate the message without motivation so providing context should come before the message. \n\nMost professional communications are structured as:\n\n1. Motivation (what is the problem and why should the audience care?)\n2. The main message (how did you solve the problem?)\n3. The details supporting the main results.\n\n\nWhen designing a graphic, presentation or document you should have a relentless focus on conveying the message -- the \"so what?\" The following quote comes from a blog post about conveying your message that is worth reading (see [**here**](http://www.storytellingwithdata.com/blog/2017/3/22/so-what)).\n\n> Too often, when we communicate with data, we don't make our point clear. We leave our audience guessing. **Your audience should never have to guess what message you want them to know.** The onus is on the person communicating the information (you!) to make that clear. -- *Cole Knaflic*\n\nState the upshot of your presentation **explicitly** and **at the beginning**. It is tempting to save the conclusions until after presenting the details of the analysis or to assume the audience will just understand the point without you explicitly stating it. While these strategies may be be effective for writing a novel, they are not effective for technical communication.\n\n<!-- Mathematics is communicated this way. Mathematical results are typically presented *theorem-proof* style meaning they state the theorem first then prove the theorem (opposed to first prove the result then state the result that was just proved).  -->\n\nThe rule of message before details applies both at a macro-scale (e.g. executive summary) and at a micro-scale (e.g. plot titles). Some concrete recommendations include:\n\n- Always include an executive summary/abstract at the beginning of the document.\n- State the upshot of the graphic in the title (e.g. see [this post](http://www.storytellingwithdata.com/blog/2017/3/22/so-what)).\n- Similarly for a PowerPoint state the upshot in the title of a slide.\n- Functions should have informative names (e.g. `str_extract` (good) vs `grep` (bad)).\n- When communicating a complex concept (e.g. a theorem) state the intuition before formally defining the concept.\n\n\nFocusing on the message first requires that you understand the message. My high school English teacher's favorite quote was\n\n> How can I know what I think until I see what I say.\n\nYou sometimes have to write most of the paper until you understand what the thesis is. It's ok to leave deciding or clarifying the message until you are almost done composing a document or graphic. \n\n\n## Hierarchical is better than sequential\n\nHumans tend to process hierarchical information better than sequential information. \n\nWe categorize living creatures into a hierarchical taxonomy (kingdom, phylum, ...). Textbooks are organized into: chapters, sections, and subsections. A complex function is composed of many helper functions. \n\nFor a more concrete example, compare:\n\n> *My research has both theoretical and applied components: dimensionality reduction for network valued random variables, temporally evolving preferential attachment models, support vector machine in high dimensional settings, DTI structural connectivity networks, text analysis of Supreme Court decisions.*\n\nto\n\n*My research has two components.*\n\n*Theory*\n\n- Dimensionality reduction for network valued random variables.\n- Temporally evolving preferential attachment models.\n- Support vector machine in high dimensional settings.\n\n*Application* \n\n- DTI structural connectivity networks.\n- Text analysis of Supreme Court decisions.\n\nThe depth of the hierarchy you use is dependent upon the medium. For a written document try not to use more than three levels (chapters, sections, and subsections). For an oral presentation two levels is better.\n\n## Make the structure easy to navigate and understand\n\nThe audience should be able to navigate easily around a document. Furthermore, the audience should know where they are at all times. \n\nMy lecture notes have a floating table of contents on the left side. Textbooks provide a table of contents, number section headings and provide page numbers at the bottom. Websites typically have a site map at the top. In oral presentations you should show the outline at the beginning and periodically state where you are in the lecture.  \n\n\n\n## Communicate at different levels\n\nA technical document often communicates to different types of audiences; the same document might be read by both executives and data scientists. The same person might shift categories; the first time I read a paper I'm looking for the upshot/core ideas while the second time I read the paper I try to understand the technical details. Therefore, a document (paper, PowerPoint, etc) should communicate its message at multiple levels.\n\nStating the message then the details is an example of communicating at different levels. Academic papers include details both in the body of the paper and the appendix. \n\n\n# **Visual communication: static plots**\n\n\n::: {.cell}\n\n:::\n\n\nThis section compares exploratory vs. communicatory plots and then discusses some ways in which plots can be misleading. \n\nThe first two plots below compare different ways of visualizing the same data -- one version for exploration and one version for communication. The data for these plots are rental counts per hour over the course of one year for a bike sharing service (see [previous lecture](https://idc9.github.io/stor390/notes/predictive_modeling/predictive_modeling.html)). An exploratory analysis discovered that the rental trends throughout the day was qualitatively different between working and non-working days (e.g. M-F vs. weekends). \n\nThe code that creates these plots can be found [here](plot_code.html).\n\n## Exploratory plot: speed and details\n\nWhen you first analyze a data set you will rapidly make many exploratory plots. These plots should contain as much information as possible. Exploratory plots emphasize details over message and quantity over quality.\n\nThe target audience for an exploratory plot is the person making it (and maybe their collaborators). It is created quickly (2 lines of code) and contains lots of information (e.g. every data point).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](communication_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n<!-- Points to notice about the exploratory plot: -->\n\n<!-- - Grid is overlayed on the plot background. -->\n<!-- - Every data point is plotted. -->\n<!-- - Axes titles are not spelled out (e.g. hr vs. hour). -->\n<!-- - Many axis tick marks (e.g. hr = 0, 5, 10, 15, 20). -->\n<!-- - No title. -->\n\nSince minimizing speed and maximizing information are important for an exploratory plot I just kept the default values for `ggplot`. This plot would be better as an exploratory plot if I had used a [jitter plot](http://docs.ggplot2.org/current/geom_jitter.html).\n\n## Communicatory plot: message and quality\nAfter concluding an analysis, the final presentation(s) will likely have several figures in them whose purpose is to effectively communicate the findings to the intended audience. The purpose of a communicatory plot is message, not details. Often creating a good communicatory visualization is about *decluttering* i.e. do less! For example, watch [this blog post](http://www.storytellingwithdata.com/blog/2017/3/29/declutter-this-graph) step through decluttering a poor visualization.\n\nThe plot below is designed to communicate the findings to a general audience (e.g. business executives). This plot took longer to make (30 lines of code) and focuses on the message.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'workingday'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n![](communication_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nTakeaways from the communicatory plot:\n\n- Title states the message of the plot.\n- Use median count per hour as a summary (i.e. we don't plot every data point).\n- Axes are labeled properly.\n- No background grid and fewer axis ticks.\n    - The precise numbers are not important for the message.\n- Rush hour peaks are labeled for emphasis.\n- Working data is coded in two ways:\n    - Color\n    - Line type\n\n\n## Misleading figures\n\nIt is possible to mislead both yourself and others with visualizations. \n\n- [Why you should be skeptical of choropleth maps](https://kieranhealy.org/blog/archives/2015/06/12/americas-ur-choropleths/)\n    - Easy for patterns to be driven by confounding variables\n- [What makes bad figures bad](http://socviz.co/lookatdata.html#what-makes-bad-figures-bad)\n- Why pie charts are bad and how you can do better (see [here](https://kieranhealy.org/blog/archives/2017/04/06/saying-no-to-pie/)).\n- For a longer discussion on misleading visualizations see [here]( http://avoinelama.fi/hingo/kirjoituksia/misleadingvisualizations.html)\n\n# **Dynamic visualizations**\n\nSome messages are most effectively communicated with a non-static plot. These visualizations may add a time dimension to a 2 dimensional, static plot (e.g. a gif or a movie). They also might give the user the ability to interact with the visualization. \n\nHere are some examples worth looking through:\n\n- Examples from the [shiny gallary](https://shiny.rstudio.com/gallery/) including\n    - [interactive plots](https://shiny.rstudio.com/gallery/faithful.html)\n    - [maps](https://shiny.rstudio.com/gallery/bus-dashboard.html)\n- [Explanation of why Ted Ligety is an amazing skier](http://www.nytimes.com/newsgraphics/2014/sochi-olympics/giant-slalom.html)\n- Any of the stories from polygraph (see [here](https://pudding.cool/)) including\n    - [Largest vocabulary in hip-hop](https://pudding.cool/2017/02/vocabulary/)\n    - [Gender differences in film dialogs](https://pudding.cool/2017/03/film-dialogue/)\n    - [How music tastes evolved](https://pudding.cool/2017/03/music-history/)\n- [Interactive visualization of Obama's 2013 budget proposal](http://www.nytimes.com/interactive/2012/02/13/us/politics/2013-budget-proposal-graphic.html)\n- The visualization near the top titled \"Hack Your Way To Scientific Glory\n\" from [this blog post](https://fivethirtyeight.com/features/science-isnt-broken/#part1)\n\n\nThe majority of concepts are best communicated through a simple, static plot. Creating a fancy plot often adds noise to your message. There are some ways in which a dynamic plot can be effective.\n\n- Time adds a third dimension to a static, 2D plot.\n\n- There might be several related points you want to convey with similar visualizations. You could convey these points with a number of plots listed sequentially. An interactive plot where the audience can tweak some parameters creates hierarchy.\n\n- The audience might want to look through the data themselves. An interactive plot adapts to the audience by letting them look into what they are interested in.\n\n- The audience might want to dig into particular details. An interactive plot where the audience can mouse over points and pull up details both adapts to the audience and uses hierarchy.\n\n- Industry loves dashboards.\n\nYou already have the ability to make interactive and dynamic plots. [Shiny](https://shiny.rstudio.com/) allows you to create interactive visualizations. Creating a gif in R is not hard (see [here](https://www.r-bloggers.com/animate-gif-images-in-r-imagemagick/)).\n\nMany of the visualizations above were created with [D3](https://d3js.org/) which is a JavaScript library for creating amazing visualizations in a web browser.\n\n\n\n# **Programming**\n\nWriting code is an act of communication with two audiences: the computer and other programmers (including **future you**). This section discusses some strategies for writing better code (difficult to understand code == buggy code).\n\nCode is a set of instructions that the computer will follow literally. If you make a syntax mistake the code won't run. If you write code that runs, but isn't what you meant to write the computer will still listen to you.\n\nMost code will be revisited by you or someone else in the future (e.g. revisions, modification, as an example, re-factoring, etc). It is important to write code in such a way so this future person can understand what the code is doing and why you made the choices that you did.\n\nYou will pick up good software engineering principles with practice and through working with people who are more experienced than you. While software engineering is beyond the purview of this course, many software engineering principles are really about design and communication: writing code in a way that minimizes errors and maximizes human efficiency. \n\n\n## Functions and readable code\n\nYou should write a lot of functions when your code. Functions promote code reuse which makes your code faster to write and  more likely to work well (see [section 19](http://r4ds.had.co.nz/functions.html) from r4ds).\n\nHere are some suggestions that will make your code easier to understand:\n\n- Break a complex function into several helper functions (an example of hierarchy).\n\n- Functions and variables should have informative names (e.g. `str_extract`, `mean_income <- mean(data$income)`).\n\n- Variable names (and file names) should use a consistent, standard format (CammelCase or snake_case).\n\n- Use line breaks to visually organize code into smaller sections.\n\n- Write a comment for each function describing what the input is and what the function does.\n\n- Comment your code: over-commenting > under-commenting. Use comments to explain design choices that might not be obvious. \n\nYou code should be easy for a human to read and understand. \n\n\n## Folder organization\n\nFor a complex coding project you should organize your work into folders and sub-folders. Consider the github repositories for the `tidytext` package (see [here](https://github.com/juliasilge/tidytext)). \n\nThe repository contains a README document (analogous to the executive summary). The package is organized hierarchically using folders and sub-folders. For example, the core R code behind the package is in the `/R` sub-folder, test code is in `/tests`.\n\nThe code itself is organized into many functions and separate scripts (see [here](https://github.com/juliasilge/tidytext/tree/master/R)).  The package also has well written vignettes (see [here](https://cran.rstudio.com/web/packages/tidytext/vignettes/tidytext.html) or [here](https://cran.rstudio.com/web/packages/tidytext/vignettes/tf_idf.html)). These vignettes contain **minimal**, **reproducible** snippets of example code that demonstrate how to get started with the package.\n\n# **R Markdown**\n\nR Markdown (RMD) is a powerful medium for communication that allows you to weave code into a text document with some basic formatting. This section first discusses RMD's capabilities as a text editor then literate programming.\n\nFor instructions how to use more of R Markdown's capabilities see the [R Markdown cheetsheet](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf).\n\nWith R Markdown you can easily create:\n\n- Websites (390's website was composed entirely in RMD)\n- Data analysis reports\n- Books (r4ds was written in RMD)\n- Resumes or academic papers\n- Slide show presentation\n- R Package Vignettes (see [here](https://cran.r-project.org/web/packages/httr/vignettes/quickstart.html))\n- Dashboards (e.g. see [here](https://gallery.shinyapps.io/cran-gauge/))\n\nSee the RMD [**gallary**](http://rmarkdown.rstudio.com/gallery.html) for more ideas and example code.\n\n\n\n## Markdown: basic text editor\n\nR Markdown can be used as a basic text editor that easily creates HTML documents with some light formatting. It's capabilities include:\n\n- Text formatting\n    - **bold**, *italics*, ~~strike-through~~`\n- [Add links](http://www.diddukewin.com/)\n- Create sections and subsections\n- Add block quotes\n- Create lists\n- Create tables\n- Add images\n- Include R code\n- Knit to different document formats (pdf, html, word document)\n- Customize the HTML document with the YAML header\n\nThese tools should used in the way the best communicates the message to the audience i.e. following the principles discussed above. Some more concrete recommendations include:\n\n- Be selective with emphasis ([this article](http://www.dataschool.io/reproducibility-is-not-just-for-researchers/) gets carried away with bolding -- I'm certainly guilty of this occasionally).\n- Draw attention to important links. For example you might explicitly tell an audience to see a link (for important information see [here](http://www.diddukewin.com/)).\n- Use sections/subsections to create a hierarchical document.\n- Add a floating table of contents to a longer document so the user has a map.\n\n\n## **R** Markdown: literate programming\n\nTraditional literate programming is about making a complex program easy to read for a programmer by including documentation/commentary in the code. In the context of data science literate programming means you can weave code, figures and text together into one document. [This presentation](https://philchodrow.github.io/resources/rmarkdown/rmarkdown.html#1) gives a good overview of using RMD for literate programming and I will quote a few of the slides in this section.\n\nIn the context of data science [reproducibility](http://simplystatistics.org/2014/06/06/the-real-reason-reproducible-research-is-important/) means the ability for someone else to access your data, run your code and get the same results you got. This is surprisingly challenging. With R Markdown you can write all of the analysis code in the same document that you use to communicate it. The .Rmd file is now reproducible research! \n\nReproducibility is also about communication. In data science the content of an analysis is often the code of the analysis. Consider the following quote:\n\n> An article about computational science in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures. -- *David Donoho*\n\nA complicated data analysis can be described by a workflow chart (e.g. see [here](https://www.google.com/search?q=workflow+site:nature.com&biw=1706&bih=901&source=lnms&tbm=isch&sa=X&ved=0ahUKEwi3usL8-dDPAhUDMSYKHaBFBTAQ_AUIBigB#tbm=isch&q=analysis+workflow+site:nature.com)). However a verbal or visual description of an analysis is only a summary of the analysis. The actual analysis is contained in the code. If I really want to know what you did I need to be able to see your code. \n\n\n\n# **Asking questions**\n\nAsking questions effectively will improve the chances that you get a good answer. Whether you email a colleague or post a question to StackOverflow -- ineffective questions waste your time and other people's time. \n\nFor instructions on how to ask effective questions about programming read the following three short posts:\n\n- [How do I ask a good question?](https://stackoverflow.com/help/how-to-ask) by StackOverflow\n    - This advice applies to questions about other topics than programming.\n- [How to write a reproducible example](http://adv-r.had.co.nz/Reproducibility.html) by Hadley Wickham\n- [How to create a Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve) By StackOverflow\n\nThere are two posts about reproducible examples because they are so important.\n\n\n# **Additional References**\n\nUnfortunately Trees, Maps and Theorems is not free online, however you can find [suplementary material here](http://www.treesmapsandtheorems.com/X0300.php).\n\nEdward Tufte has a number of famous books on communicating visual evidence (see [here](https://www.edwardtufte.com/tufte/)).\n\n[Chart dos and donâ€™ts](http://www.eea.europa.eu/data-and-maps/daviz/learn-more/chart-dos-and-donts)\n\n[Tips for Giving Clear Talks](http://www.cs.cmu.edu/~kayvonf/misc/cleartalktips.pdf)\n\n[viz.wtf/](http://viz.wtf/) has some wonderful examples of bad visualizations\n\n\n[Story Telling with Data](http://www.storytellingwithdata.com/) is an excellent blog/book on communicating with data.\n\n[This article](https://medium.com/@matthew_daniels/the-journalist-engineer-c9c1a72b993f) explains why interactive visualizations are now becoming effective forms of journalism.\n\n\nThe [graphics for communication](http://r4ds.had.co.nz/graphics-for-communication.html) section of r4ds has good recommendations for visualization and demonstrates how to customize ggplot.\n\nMike Bostock's blog post on what makes good software illustrates how some of the principles discussed in this lecture apply to writing code (see [here](https://medium.com/@mbostock/what-makes-software-good-943557f8a488)). He also has a post on using visualization to understand algorithms (see [here](https://bost.ocks.org/mike/algorithms/)).\n\n[This blog post](http://www.scribblelive.com/blog/2012/04/02/10-things-you-can-learn-from-the-new-york-times-data-visualizations/) discusses reasons why the New York Times is so successful which you can learn from.\n\nKieran Healy's class on data visualization has a lot of good resources and advice (see [here](http://vissoc.co/)).\n\n[Effective writing in mathematical statistics](http://www.stat.yale.edu/~lc436/marron.pdf) by Steve Marron.\n\nFor more on reproducible research see these articles ([1](http://simplystatistics.org/2015/12/11/instead-of-research-on-reproducibility-just-do-reproducible-research/), [2](http://kbroman.org/Tools4RR/), [3](https://www.coursera.org/learn/reproducible-research)).\n\n[Flowing Data](http://flowingdata.com/) is a wonderful blog on visualizations.\n\n---\n\n",
    "supporting": [
      "communication_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}